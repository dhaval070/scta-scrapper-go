// Code generated by "enumer -type=Month"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _MonthName = "JanFebMarAprMayJunJulAugSepOctNovDec"

var _MonthIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36}

func (i Month) String() string {
	i -= 1
	if i < 0 || i >= Month(len(_MonthIndex)-1) {
		return fmt.Sprintf("Month(%d)", i+1)
	}
	return _MonthName[_MonthIndex[i]:_MonthIndex[i+1]]
}

var _MonthValues = []Month{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _MonthNameToValueMap = map[string]Month{
	_MonthName[0:3]:   1,
	_MonthName[3:6]:   2,
	_MonthName[6:9]:   3,
	_MonthName[9:12]:  4,
	_MonthName[12:15]: 5,
	_MonthName[15:18]: 6,
	_MonthName[18:21]: 7,
	_MonthName[21:24]: 8,
	_MonthName[24:27]: 9,
	_MonthName[27:30]: 10,
	_MonthName[30:33]: 11,
	_MonthName[33:36]: 12,
}

// MonthString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MonthString(s string) (Month, error) {
	if val, ok := _MonthNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Month values", s)
}

// MonthValues returns all values of the enum
func MonthValues() []Month {
	return _MonthValues
}

// IsAMonth returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Month) IsAMonth() bool {
	for _, v := range _MonthValues {
		if i == v {
			return true
		}
	}
	return false
}
