// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newOhfTeam(db *gorm.DB, opts ...gen.DOOption) ohfTeam {
	_ohfTeam := ohfTeam{}

	_ohfTeam.ohfTeamDo.UseDB(db, opts...)
	_ohfTeam.ohfTeamDo.UseModel(&model.OhfTeam{})

	tableName := _ohfTeam.ohfTeamDo.TableName()
	_ohfTeam.ALL = field.NewAsterisk(tableName)
	_ohfTeam.TeamNumber = field.NewString(tableName, "team_number")
	_ohfTeam.TeamName = field.NewString(tableName, "team_name")
	_ohfTeam.TeamOrganization = field.NewString(tableName, "team_organization")
	_ohfTeam.TeamOrganizationPath = field.NewString(tableName, "team_organization_path")
	_ohfTeam.TeamGenderIdentity = field.NewString(tableName, "team_gender_identity")
	_ohfTeam.DivisionName = field.NewString(tableName, "division_name")
	_ohfTeam.RegistrationsClassName = field.NewString(tableName, "registrations_class_name")
	_ohfTeam.CategoryName = field.NewString(tableName, "category_name")

	_ohfTeam.fillFieldMap()

	return _ohfTeam
}

type ohfTeam struct {
	ohfTeamDo ohfTeamDo

	ALL                    field.Asterisk
	TeamNumber             field.String
	TeamName               field.String
	TeamOrganization       field.String
	TeamOrganizationPath   field.String
	TeamGenderIdentity     field.String
	DivisionName           field.String
	RegistrationsClassName field.String
	CategoryName           field.String

	fieldMap map[string]field.Expr
}

func (o ohfTeam) Table(newTableName string) *ohfTeam {
	o.ohfTeamDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ohfTeam) As(alias string) *ohfTeam {
	o.ohfTeamDo.DO = *(o.ohfTeamDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ohfTeam) updateTableName(table string) *ohfTeam {
	o.ALL = field.NewAsterisk(table)
	o.TeamNumber = field.NewString(table, "team_number")
	o.TeamName = field.NewString(table, "team_name")
	o.TeamOrganization = field.NewString(table, "team_organization")
	o.TeamOrganizationPath = field.NewString(table, "team_organization_path")
	o.TeamGenderIdentity = field.NewString(table, "team_gender_identity")
	o.DivisionName = field.NewString(table, "division_name")
	o.RegistrationsClassName = field.NewString(table, "registrations_class_name")
	o.CategoryName = field.NewString(table, "category_name")

	o.fillFieldMap()

	return o
}

func (o *ohfTeam) WithContext(ctx context.Context) *ohfTeamDo { return o.ohfTeamDo.WithContext(ctx) }

func (o ohfTeam) TableName() string { return o.ohfTeamDo.TableName() }

func (o ohfTeam) Alias() string { return o.ohfTeamDo.Alias() }

func (o ohfTeam) Columns(cols ...field.Expr) gen.Columns { return o.ohfTeamDo.Columns(cols...) }

func (o *ohfTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ohfTeam) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["team_number"] = o.TeamNumber
	o.fieldMap["team_name"] = o.TeamName
	o.fieldMap["team_organization"] = o.TeamOrganization
	o.fieldMap["team_organization_path"] = o.TeamOrganizationPath
	o.fieldMap["team_gender_identity"] = o.TeamGenderIdentity
	o.fieldMap["division_name"] = o.DivisionName
	o.fieldMap["registrations_class_name"] = o.RegistrationsClassName
	o.fieldMap["category_name"] = o.CategoryName
}

func (o ohfTeam) clone(db *gorm.DB) ohfTeam {
	o.ohfTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o ohfTeam) replaceDB(db *gorm.DB) ohfTeam {
	o.ohfTeamDo.ReplaceDB(db)
	return o
}

type ohfTeamDo struct{ gen.DO }

func (o ohfTeamDo) Debug() *ohfTeamDo {
	return o.withDO(o.DO.Debug())
}

func (o ohfTeamDo) WithContext(ctx context.Context) *ohfTeamDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ohfTeamDo) ReadDB() *ohfTeamDo {
	return o.Clauses(dbresolver.Read)
}

func (o ohfTeamDo) WriteDB() *ohfTeamDo {
	return o.Clauses(dbresolver.Write)
}

func (o ohfTeamDo) Session(config *gorm.Session) *ohfTeamDo {
	return o.withDO(o.DO.Session(config))
}

func (o ohfTeamDo) Clauses(conds ...clause.Expression) *ohfTeamDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ohfTeamDo) Returning(value interface{}, columns ...string) *ohfTeamDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ohfTeamDo) Not(conds ...gen.Condition) *ohfTeamDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ohfTeamDo) Or(conds ...gen.Condition) *ohfTeamDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ohfTeamDo) Select(conds ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ohfTeamDo) Where(conds ...gen.Condition) *ohfTeamDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ohfTeamDo) Order(conds ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ohfTeamDo) Distinct(cols ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ohfTeamDo) Omit(cols ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ohfTeamDo) Join(table schema.Tabler, on ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ohfTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ohfTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ohfTeamDo) Group(cols ...field.Expr) *ohfTeamDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ohfTeamDo) Having(conds ...gen.Condition) *ohfTeamDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ohfTeamDo) Limit(limit int) *ohfTeamDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ohfTeamDo) Offset(offset int) *ohfTeamDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ohfTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ohfTeamDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ohfTeamDo) Unscoped() *ohfTeamDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ohfTeamDo) Create(values ...*model.OhfTeam) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ohfTeamDo) CreateInBatches(values []*model.OhfTeam, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ohfTeamDo) Save(values ...*model.OhfTeam) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ohfTeamDo) First() (*model.OhfTeam, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OhfTeam), nil
	}
}

func (o ohfTeamDo) Take() (*model.OhfTeam, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OhfTeam), nil
	}
}

func (o ohfTeamDo) Last() (*model.OhfTeam, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OhfTeam), nil
	}
}

func (o ohfTeamDo) Find() ([]*model.OhfTeam, error) {
	result, err := o.DO.Find()
	return result.([]*model.OhfTeam), err
}

func (o ohfTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OhfTeam, err error) {
	buf := make([]*model.OhfTeam, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ohfTeamDo) FindInBatches(result *[]*model.OhfTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ohfTeamDo) Attrs(attrs ...field.AssignExpr) *ohfTeamDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ohfTeamDo) Assign(attrs ...field.AssignExpr) *ohfTeamDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ohfTeamDo) Joins(fields ...field.RelationField) *ohfTeamDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ohfTeamDo) Preload(fields ...field.RelationField) *ohfTeamDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ohfTeamDo) FirstOrInit() (*model.OhfTeam, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OhfTeam), nil
	}
}

func (o ohfTeamDo) FirstOrCreate() (*model.OhfTeam, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OhfTeam), nil
	}
}

func (o ohfTeamDo) FindByPage(offset int, limit int) (result []*model.OhfTeam, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ohfTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ohfTeamDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ohfTeamDo) Delete(models ...*model.OhfTeam) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ohfTeamDo) withDO(do gen.Dao) *ohfTeamDo {
	o.DO = *do.(*gen.DO)
	return o
}
