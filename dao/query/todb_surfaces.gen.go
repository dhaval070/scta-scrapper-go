// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newTodbSurface(db *gorm.DB, opts ...gen.DOOption) todbSurface {
	_todbSurface := todbSurface{}

	_todbSurface.todbSurfaceDo.UseDB(db, opts...)
	_todbSurface.todbSurfaceDo.UseModel(&model.TodbSurface{})

	tableName := _todbSurface.todbSurfaceDo.TableName()
	_todbSurface.ALL = field.NewAsterisk(tableName)
	_todbSurface.ID = field.NewInt32(tableName, "id")
	_todbSurface.Fullname = field.NewString(tableName, "fullname")
	_todbSurface.Fullshortname = field.NewString(tableName, "fullshortname")
	_todbSurface.Street = field.NewString(tableName, "street")
	_todbSurface.City = field.NewString(tableName, "city")
	_todbSurface.Province = field.NewString(tableName, "province")

	_todbSurface.fillFieldMap()

	return _todbSurface
}

type todbSurface struct {
	todbSurfaceDo todbSurfaceDo

	ALL           field.Asterisk
	ID            field.Int32
	Fullname      field.String
	Fullshortname field.String
	Street        field.String
	City          field.String
	Province      field.String

	fieldMap map[string]field.Expr
}

func (t todbSurface) Table(newTableName string) *todbSurface {
	t.todbSurfaceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t todbSurface) As(alias string) *todbSurface {
	t.todbSurfaceDo.DO = *(t.todbSurfaceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *todbSurface) updateTableName(table string) *todbSurface {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Fullname = field.NewString(table, "fullname")
	t.Fullshortname = field.NewString(table, "fullshortname")
	t.Street = field.NewString(table, "street")
	t.City = field.NewString(table, "city")
	t.Province = field.NewString(table, "province")

	t.fillFieldMap()

	return t
}

func (t *todbSurface) WithContext(ctx context.Context) *todbSurfaceDo {
	return t.todbSurfaceDo.WithContext(ctx)
}

func (t todbSurface) TableName() string { return t.todbSurfaceDo.TableName() }

func (t todbSurface) Alias() string { return t.todbSurfaceDo.Alias() }

func (t todbSurface) Columns(cols ...field.Expr) gen.Columns { return t.todbSurfaceDo.Columns(cols...) }

func (t *todbSurface) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *todbSurface) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["fullname"] = t.Fullname
	t.fieldMap["fullshortname"] = t.Fullshortname
	t.fieldMap["street"] = t.Street
	t.fieldMap["city"] = t.City
	t.fieldMap["province"] = t.Province
}

func (t todbSurface) clone(db *gorm.DB) todbSurface {
	t.todbSurfaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t todbSurface) replaceDB(db *gorm.DB) todbSurface {
	t.todbSurfaceDo.ReplaceDB(db)
	return t
}

type todbSurfaceDo struct{ gen.DO }

func (t todbSurfaceDo) Debug() *todbSurfaceDo {
	return t.withDO(t.DO.Debug())
}

func (t todbSurfaceDo) WithContext(ctx context.Context) *todbSurfaceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t todbSurfaceDo) ReadDB() *todbSurfaceDo {
	return t.Clauses(dbresolver.Read)
}

func (t todbSurfaceDo) WriteDB() *todbSurfaceDo {
	return t.Clauses(dbresolver.Write)
}

func (t todbSurfaceDo) Session(config *gorm.Session) *todbSurfaceDo {
	return t.withDO(t.DO.Session(config))
}

func (t todbSurfaceDo) Clauses(conds ...clause.Expression) *todbSurfaceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t todbSurfaceDo) Returning(value interface{}, columns ...string) *todbSurfaceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t todbSurfaceDo) Not(conds ...gen.Condition) *todbSurfaceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t todbSurfaceDo) Or(conds ...gen.Condition) *todbSurfaceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t todbSurfaceDo) Select(conds ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t todbSurfaceDo) Where(conds ...gen.Condition) *todbSurfaceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t todbSurfaceDo) Order(conds ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t todbSurfaceDo) Distinct(cols ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t todbSurfaceDo) Omit(cols ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t todbSurfaceDo) Join(table schema.Tabler, on ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t todbSurfaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t todbSurfaceDo) RightJoin(table schema.Tabler, on ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t todbSurfaceDo) Group(cols ...field.Expr) *todbSurfaceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t todbSurfaceDo) Having(conds ...gen.Condition) *todbSurfaceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t todbSurfaceDo) Limit(limit int) *todbSurfaceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t todbSurfaceDo) Offset(offset int) *todbSurfaceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t todbSurfaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *todbSurfaceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t todbSurfaceDo) Unscoped() *todbSurfaceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t todbSurfaceDo) Create(values ...*model.TodbSurface) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t todbSurfaceDo) CreateInBatches(values []*model.TodbSurface, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t todbSurfaceDo) Save(values ...*model.TodbSurface) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t todbSurfaceDo) First() (*model.TodbSurface, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodbSurface), nil
	}
}

func (t todbSurfaceDo) Take() (*model.TodbSurface, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodbSurface), nil
	}
}

func (t todbSurfaceDo) Last() (*model.TodbSurface, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodbSurface), nil
	}
}

func (t todbSurfaceDo) Find() ([]*model.TodbSurface, error) {
	result, err := t.DO.Find()
	return result.([]*model.TodbSurface), err
}

func (t todbSurfaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TodbSurface, err error) {
	buf := make([]*model.TodbSurface, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t todbSurfaceDo) FindInBatches(result *[]*model.TodbSurface, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t todbSurfaceDo) Attrs(attrs ...field.AssignExpr) *todbSurfaceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t todbSurfaceDo) Assign(attrs ...field.AssignExpr) *todbSurfaceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t todbSurfaceDo) Joins(fields ...field.RelationField) *todbSurfaceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t todbSurfaceDo) Preload(fields ...field.RelationField) *todbSurfaceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t todbSurfaceDo) FirstOrInit() (*model.TodbSurface, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodbSurface), nil
	}
}

func (t todbSurfaceDo) FirstOrCreate() (*model.TodbSurface, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodbSurface), nil
	}
}

func (t todbSurfaceDo) FindByPage(offset int, limit int) (result []*model.TodbSurface, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t todbSurfaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t todbSurfaceDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t todbSurfaceDo) Delete(models ...*model.TodbSurface) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *todbSurfaceDo) withDO(do gen.Dao) *todbSurfaceDo {
	t.DO = *do.(*gen.DO)
	return t
}
