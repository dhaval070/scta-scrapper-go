// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newMhlMapping(db *gorm.DB, opts ...gen.DOOption) mhlMapping {
	_mhlMapping := mhlMapping{}

	_mhlMapping.mhlMappingDo.UseDB(db, opts...)
	_mhlMapping.mhlMappingDo.UseModel(&model.MhlMapping{})

	tableName := _mhlMapping.mhlMappingDo.TableName()
	_mhlMapping.ALL = field.NewAsterisk(tableName)
	_mhlMapping.Location = field.NewString(tableName, "location")
	_mhlMapping.SurfaceID = field.NewInt32(tableName, "surface_id")

	_mhlMapping.fillFieldMap()

	return _mhlMapping
}

type mhlMapping struct {
	mhlMappingDo mhlMappingDo

	ALL       field.Asterisk
	Location  field.String
	SurfaceID field.Int32

	fieldMap map[string]field.Expr
}

func (m mhlMapping) Table(newTableName string) *mhlMapping {
	m.mhlMappingDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mhlMapping) As(alias string) *mhlMapping {
	m.mhlMappingDo.DO = *(m.mhlMappingDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mhlMapping) updateTableName(table string) *mhlMapping {
	m.ALL = field.NewAsterisk(table)
	m.Location = field.NewString(table, "location")
	m.SurfaceID = field.NewInt32(table, "surface_id")

	m.fillFieldMap()

	return m
}

func (m *mhlMapping) WithContext(ctx context.Context) *mhlMappingDo {
	return m.mhlMappingDo.WithContext(ctx)
}

func (m mhlMapping) TableName() string { return m.mhlMappingDo.TableName() }

func (m mhlMapping) Alias() string { return m.mhlMappingDo.Alias() }

func (m mhlMapping) Columns(cols ...field.Expr) gen.Columns { return m.mhlMappingDo.Columns(cols...) }

func (m *mhlMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mhlMapping) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["location"] = m.Location
	m.fieldMap["surface_id"] = m.SurfaceID
}

func (m mhlMapping) clone(db *gorm.DB) mhlMapping {
	m.mhlMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mhlMapping) replaceDB(db *gorm.DB) mhlMapping {
	m.mhlMappingDo.ReplaceDB(db)
	return m
}

type mhlMappingDo struct{ gen.DO }

func (m mhlMappingDo) Debug() *mhlMappingDo {
	return m.withDO(m.DO.Debug())
}

func (m mhlMappingDo) WithContext(ctx context.Context) *mhlMappingDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mhlMappingDo) ReadDB() *mhlMappingDo {
	return m.Clauses(dbresolver.Read)
}

func (m mhlMappingDo) WriteDB() *mhlMappingDo {
	return m.Clauses(dbresolver.Write)
}

func (m mhlMappingDo) Session(config *gorm.Session) *mhlMappingDo {
	return m.withDO(m.DO.Session(config))
}

func (m mhlMappingDo) Clauses(conds ...clause.Expression) *mhlMappingDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mhlMappingDo) Returning(value interface{}, columns ...string) *mhlMappingDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mhlMappingDo) Not(conds ...gen.Condition) *mhlMappingDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mhlMappingDo) Or(conds ...gen.Condition) *mhlMappingDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mhlMappingDo) Select(conds ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mhlMappingDo) Where(conds ...gen.Condition) *mhlMappingDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mhlMappingDo) Order(conds ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mhlMappingDo) Distinct(cols ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mhlMappingDo) Omit(cols ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mhlMappingDo) Join(table schema.Tabler, on ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mhlMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mhlMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mhlMappingDo) Group(cols ...field.Expr) *mhlMappingDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mhlMappingDo) Having(conds ...gen.Condition) *mhlMappingDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mhlMappingDo) Limit(limit int) *mhlMappingDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mhlMappingDo) Offset(offset int) *mhlMappingDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mhlMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mhlMappingDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mhlMappingDo) Unscoped() *mhlMappingDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mhlMappingDo) Create(values ...*model.MhlMapping) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mhlMappingDo) CreateInBatches(values []*model.MhlMapping, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mhlMappingDo) Save(values ...*model.MhlMapping) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mhlMappingDo) First() (*model.MhlMapping, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhlMapping), nil
	}
}

func (m mhlMappingDo) Take() (*model.MhlMapping, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhlMapping), nil
	}
}

func (m mhlMappingDo) Last() (*model.MhlMapping, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhlMapping), nil
	}
}

func (m mhlMappingDo) Find() ([]*model.MhlMapping, error) {
	result, err := m.DO.Find()
	return result.([]*model.MhlMapping), err
}

func (m mhlMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MhlMapping, err error) {
	buf := make([]*model.MhlMapping, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mhlMappingDo) FindInBatches(result *[]*model.MhlMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mhlMappingDo) Attrs(attrs ...field.AssignExpr) *mhlMappingDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mhlMappingDo) Assign(attrs ...field.AssignExpr) *mhlMappingDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mhlMappingDo) Joins(fields ...field.RelationField) *mhlMappingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mhlMappingDo) Preload(fields ...field.RelationField) *mhlMappingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mhlMappingDo) FirstOrInit() (*model.MhlMapping, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhlMapping), nil
	}
}

func (m mhlMappingDo) FirstOrCreate() (*model.MhlMapping, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhlMapping), nil
	}
}

func (m mhlMappingDo) FindByPage(offset int, limit int) (result []*model.MhlMapping, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mhlMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mhlMappingDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mhlMappingDo) Delete(models ...*model.MhlMapping) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mhlMappingDo) withDO(do gen.Dao) *mhlMappingDo {
	m.DO = *do.(*gen.DO)
	return m
}
