// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newSitesLocation(db *gorm.DB, opts ...gen.DOOption) sitesLocation {
	_sitesLocation := sitesLocation{}

	_sitesLocation.sitesLocationDo.UseDB(db, opts...)
	_sitesLocation.sitesLocationDo.UseModel(&model.SitesLocation{})

	tableName := _sitesLocation.sitesLocationDo.TableName()
	_sitesLocation.ALL = field.NewAsterisk(tableName)
	_sitesLocation.Site = field.NewString(tableName, "site")
	_sitesLocation.Location = field.NewString(tableName, "location")
	_sitesLocation.LocationID = field.NewInt32(tableName, "location_id")
	_sitesLocation.Loc = field.NewString(tableName, "loc")
	_sitesLocation.Surface = field.NewString(tableName, "surface")
	_sitesLocation.Address = field.NewString(tableName, "address")
	_sitesLocation.MatchType = field.NewString(tableName, "match_type")
	_sitesLocation.SurfaceID = field.NewInt32(tableName, "surface_id")

	_sitesLocation.fillFieldMap()

	return _sitesLocation
}

type sitesLocation struct {
	sitesLocationDo sitesLocationDo

	ALL        field.Asterisk
	Site       field.String
	Location   field.String
	LocationID field.Int32
	Loc        field.String
	Surface    field.String
	Address    field.String
	MatchType  field.String
	SurfaceID  field.Int32

	fieldMap map[string]field.Expr
}

func (s sitesLocation) Table(newTableName string) *sitesLocation {
	s.sitesLocationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sitesLocation) As(alias string) *sitesLocation {
	s.sitesLocationDo.DO = *(s.sitesLocationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sitesLocation) updateTableName(table string) *sitesLocation {
	s.ALL = field.NewAsterisk(table)
	s.Site = field.NewString(table, "site")
	s.Location = field.NewString(table, "location")
	s.LocationID = field.NewInt32(table, "location_id")
	s.Loc = field.NewString(table, "loc")
	s.Surface = field.NewString(table, "surface")
	s.Address = field.NewString(table, "address")
	s.MatchType = field.NewString(table, "match_type")
	s.SurfaceID = field.NewInt32(table, "surface_id")

	s.fillFieldMap()

	return s
}

func (s *sitesLocation) WithContext(ctx context.Context) *sitesLocationDo {
	return s.sitesLocationDo.WithContext(ctx)
}

func (s sitesLocation) TableName() string { return s.sitesLocationDo.TableName() }

func (s sitesLocation) Alias() string { return s.sitesLocationDo.Alias() }

func (s sitesLocation) Columns(cols ...field.Expr) gen.Columns {
	return s.sitesLocationDo.Columns(cols...)
}

func (s *sitesLocation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sitesLocation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["site"] = s.Site
	s.fieldMap["location"] = s.Location
	s.fieldMap["location_id"] = s.LocationID
	s.fieldMap["loc"] = s.Loc
	s.fieldMap["surface"] = s.Surface
	s.fieldMap["address"] = s.Address
	s.fieldMap["match_type"] = s.MatchType
	s.fieldMap["surface_id"] = s.SurfaceID
}

func (s sitesLocation) clone(db *gorm.DB) sitesLocation {
	s.sitesLocationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sitesLocation) replaceDB(db *gorm.DB) sitesLocation {
	s.sitesLocationDo.ReplaceDB(db)
	return s
}

type sitesLocationDo struct{ gen.DO }

func (s sitesLocationDo) Debug() *sitesLocationDo {
	return s.withDO(s.DO.Debug())
}

func (s sitesLocationDo) WithContext(ctx context.Context) *sitesLocationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sitesLocationDo) ReadDB() *sitesLocationDo {
	return s.Clauses(dbresolver.Read)
}

func (s sitesLocationDo) WriteDB() *sitesLocationDo {
	return s.Clauses(dbresolver.Write)
}

func (s sitesLocationDo) Session(config *gorm.Session) *sitesLocationDo {
	return s.withDO(s.DO.Session(config))
}

func (s sitesLocationDo) Clauses(conds ...clause.Expression) *sitesLocationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sitesLocationDo) Returning(value interface{}, columns ...string) *sitesLocationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sitesLocationDo) Not(conds ...gen.Condition) *sitesLocationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sitesLocationDo) Or(conds ...gen.Condition) *sitesLocationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sitesLocationDo) Select(conds ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sitesLocationDo) Where(conds ...gen.Condition) *sitesLocationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sitesLocationDo) Order(conds ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sitesLocationDo) Distinct(cols ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sitesLocationDo) Omit(cols ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sitesLocationDo) Join(table schema.Tabler, on ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sitesLocationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sitesLocationDo) RightJoin(table schema.Tabler, on ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sitesLocationDo) Group(cols ...field.Expr) *sitesLocationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sitesLocationDo) Having(conds ...gen.Condition) *sitesLocationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sitesLocationDo) Limit(limit int) *sitesLocationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sitesLocationDo) Offset(offset int) *sitesLocationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sitesLocationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sitesLocationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sitesLocationDo) Unscoped() *sitesLocationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sitesLocationDo) Create(values ...*model.SitesLocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sitesLocationDo) CreateInBatches(values []*model.SitesLocation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sitesLocationDo) Save(values ...*model.SitesLocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sitesLocationDo) First() (*model.SitesLocation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SitesLocation), nil
	}
}

func (s sitesLocationDo) Take() (*model.SitesLocation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SitesLocation), nil
	}
}

func (s sitesLocationDo) Last() (*model.SitesLocation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SitesLocation), nil
	}
}

func (s sitesLocationDo) Find() ([]*model.SitesLocation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SitesLocation), err
}

func (s sitesLocationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SitesLocation, err error) {
	buf := make([]*model.SitesLocation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sitesLocationDo) FindInBatches(result *[]*model.SitesLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sitesLocationDo) Attrs(attrs ...field.AssignExpr) *sitesLocationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sitesLocationDo) Assign(attrs ...field.AssignExpr) *sitesLocationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sitesLocationDo) Joins(fields ...field.RelationField) *sitesLocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sitesLocationDo) Preload(fields ...field.RelationField) *sitesLocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sitesLocationDo) FirstOrInit() (*model.SitesLocation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SitesLocation), nil
	}
}

func (s sitesLocationDo) FirstOrCreate() (*model.SitesLocation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SitesLocation), nil
	}
}

func (s sitesLocationDo) FindByPage(offset int, limit int) (result []*model.SitesLocation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sitesLocationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sitesLocationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sitesLocationDo) Delete(models ...*model.SitesLocation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sitesLocationDo) withDO(do gen.Dao) *sitesLocationDo {
	s.DO = *do.(*gen.DO)
	return s
}
