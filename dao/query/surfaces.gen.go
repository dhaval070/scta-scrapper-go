// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newSurface(db *gorm.DB, opts ...gen.DOOption) surface {
	_surface := surface{}

	_surface.surfaceDo.UseDB(db, opts...)
	_surface.surfaceDo.UseModel(&model.Surface{})

	tableName := _surface.surfaceDo.TableName()
	_surface.ALL = field.NewAsterisk(tableName)
	_surface.ID = field.NewInt32(tableName, "id")
	_surface.LocationID = field.NewInt32(tableName, "location_id")
	_surface.Name = field.NewString(tableName, "name")
	_surface.UUID = field.NewString(tableName, "uuid")
	_surface.OrderIndex = field.NewInt32(tableName, "orderIndex")
	_surface.VenueID = field.NewInt32(tableName, "venue_id")
	_surface.ClosedFrom = field.NewInt64(tableName, "closed_from")
	_surface.ComingSoon = field.NewBool(tableName, "coming_soon")
	_surface.Online = field.NewBool(tableName, "online")
	_surface.Status = field.NewString(tableName, "status")
	_surface.Sports = field.NewString(tableName, "sports")
	_surface.FirstMediaDate = field.NewInt64(tableName, "first_media_date")

	_surface.fillFieldMap()

	return _surface
}

type surface struct {
	surfaceDo surfaceDo

	ALL            field.Asterisk
	ID             field.Int32
	LocationID     field.Int32
	Name           field.String
	UUID           field.String
	OrderIndex     field.Int32
	VenueID        field.Int32
	ClosedFrom     field.Int64
	ComingSoon     field.Bool
	Online         field.Bool
	Status         field.String
	Sports         field.String
	FirstMediaDate field.Int64

	fieldMap map[string]field.Expr
}

func (s surface) Table(newTableName string) *surface {
	s.surfaceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surface) As(alias string) *surface {
	s.surfaceDo.DO = *(s.surfaceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surface) updateTableName(table string) *surface {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.LocationID = field.NewInt32(table, "location_id")
	s.Name = field.NewString(table, "name")
	s.UUID = field.NewString(table, "uuid")
	s.OrderIndex = field.NewInt32(table, "orderIndex")
	s.VenueID = field.NewInt32(table, "venue_id")
	s.ClosedFrom = field.NewInt64(table, "closed_from")
	s.ComingSoon = field.NewBool(table, "coming_soon")
	s.Online = field.NewBool(table, "online")
	s.Status = field.NewString(table, "status")
	s.Sports = field.NewString(table, "sports")
	s.FirstMediaDate = field.NewInt64(table, "first_media_date")

	s.fillFieldMap()

	return s
}

func (s *surface) WithContext(ctx context.Context) *surfaceDo { return s.surfaceDo.WithContext(ctx) }

func (s surface) TableName() string { return s.surfaceDo.TableName() }

func (s surface) Alias() string { return s.surfaceDo.Alias() }

func (s surface) Columns(cols ...field.Expr) gen.Columns { return s.surfaceDo.Columns(cols...) }

func (s *surface) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surface) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["location_id"] = s.LocationID
	s.fieldMap["name"] = s.Name
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["orderIndex"] = s.OrderIndex
	s.fieldMap["venue_id"] = s.VenueID
	s.fieldMap["closed_from"] = s.ClosedFrom
	s.fieldMap["coming_soon"] = s.ComingSoon
	s.fieldMap["online"] = s.Online
	s.fieldMap["status"] = s.Status
	s.fieldMap["sports"] = s.Sports
	s.fieldMap["first_media_date"] = s.FirstMediaDate
}

func (s surface) clone(db *gorm.DB) surface {
	s.surfaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surface) replaceDB(db *gorm.DB) surface {
	s.surfaceDo.ReplaceDB(db)
	return s
}

type surfaceDo struct{ gen.DO }

func (s surfaceDo) Debug() *surfaceDo {
	return s.withDO(s.DO.Debug())
}

func (s surfaceDo) WithContext(ctx context.Context) *surfaceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surfaceDo) ReadDB() *surfaceDo {
	return s.Clauses(dbresolver.Read)
}

func (s surfaceDo) WriteDB() *surfaceDo {
	return s.Clauses(dbresolver.Write)
}

func (s surfaceDo) Session(config *gorm.Session) *surfaceDo {
	return s.withDO(s.DO.Session(config))
}

func (s surfaceDo) Clauses(conds ...clause.Expression) *surfaceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surfaceDo) Returning(value interface{}, columns ...string) *surfaceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surfaceDo) Not(conds ...gen.Condition) *surfaceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surfaceDo) Or(conds ...gen.Condition) *surfaceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surfaceDo) Select(conds ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surfaceDo) Where(conds ...gen.Condition) *surfaceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surfaceDo) Order(conds ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surfaceDo) Distinct(cols ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surfaceDo) Omit(cols ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surfaceDo) Join(table schema.Tabler, on ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surfaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surfaceDo) RightJoin(table schema.Tabler, on ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surfaceDo) Group(cols ...field.Expr) *surfaceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surfaceDo) Having(conds ...gen.Condition) *surfaceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surfaceDo) Limit(limit int) *surfaceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surfaceDo) Offset(offset int) *surfaceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surfaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *surfaceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surfaceDo) Unscoped() *surfaceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surfaceDo) Create(values ...*model.Surface) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surfaceDo) CreateInBatches(values []*model.Surface, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surfaceDo) Save(values ...*model.Surface) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surfaceDo) First() (*model.Surface, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Surface), nil
	}
}

func (s surfaceDo) Take() (*model.Surface, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Surface), nil
	}
}

func (s surfaceDo) Last() (*model.Surface, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Surface), nil
	}
}

func (s surfaceDo) Find() ([]*model.Surface, error) {
	result, err := s.DO.Find()
	return result.([]*model.Surface), err
}

func (s surfaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Surface, err error) {
	buf := make([]*model.Surface, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surfaceDo) FindInBatches(result *[]*model.Surface, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surfaceDo) Attrs(attrs ...field.AssignExpr) *surfaceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surfaceDo) Assign(attrs ...field.AssignExpr) *surfaceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surfaceDo) Joins(fields ...field.RelationField) *surfaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surfaceDo) Preload(fields ...field.RelationField) *surfaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surfaceDo) FirstOrInit() (*model.Surface, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Surface), nil
	}
}

func (s surfaceDo) FirstOrCreate() (*model.Surface, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Surface), nil
	}
}

func (s surfaceDo) FindByPage(offset int, limit int) (result []*model.Surface, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surfaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surfaceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surfaceDo) Delete(models ...*model.Surface) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surfaceDo) withDO(do gen.Dao) *surfaceDo {
	s.DO = *do.(*gen.DO)
	return s
}
