// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newSurfaceFeedMode(db *gorm.DB, opts ...gen.DOOption) surfaceFeedMode {
	_surfaceFeedMode := surfaceFeedMode{}

	_surfaceFeedMode.surfaceFeedModeDo.UseDB(db, opts...)
	_surfaceFeedMode.surfaceFeedModeDo.UseModel(&model.SurfaceFeedMode{})

	tableName := _surfaceFeedMode.surfaceFeedModeDo.TableName()
	_surfaceFeedMode.ALL = field.NewAsterisk(tableName)
	_surfaceFeedMode.SurfaceID = field.NewInt32(tableName, "surface_id")
	_surfaceFeedMode.FeedModeID = field.NewInt32(tableName, "feed_mode_id")

	_surfaceFeedMode.fillFieldMap()

	return _surfaceFeedMode
}

type surfaceFeedMode struct {
	surfaceFeedModeDo surfaceFeedModeDo

	ALL        field.Asterisk
	SurfaceID  field.Int32
	FeedModeID field.Int32

	fieldMap map[string]field.Expr
}

func (s surfaceFeedMode) Table(newTableName string) *surfaceFeedMode {
	s.surfaceFeedModeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surfaceFeedMode) As(alias string) *surfaceFeedMode {
	s.surfaceFeedModeDo.DO = *(s.surfaceFeedModeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surfaceFeedMode) updateTableName(table string) *surfaceFeedMode {
	s.ALL = field.NewAsterisk(table)
	s.SurfaceID = field.NewInt32(table, "surface_id")
	s.FeedModeID = field.NewInt32(table, "feed_mode_id")

	s.fillFieldMap()

	return s
}

func (s *surfaceFeedMode) WithContext(ctx context.Context) *surfaceFeedModeDo {
	return s.surfaceFeedModeDo.WithContext(ctx)
}

func (s surfaceFeedMode) TableName() string { return s.surfaceFeedModeDo.TableName() }

func (s surfaceFeedMode) Alias() string { return s.surfaceFeedModeDo.Alias() }

func (s surfaceFeedMode) Columns(cols ...field.Expr) gen.Columns {
	return s.surfaceFeedModeDo.Columns(cols...)
}

func (s *surfaceFeedMode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surfaceFeedMode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["surface_id"] = s.SurfaceID
	s.fieldMap["feed_mode_id"] = s.FeedModeID
}

func (s surfaceFeedMode) clone(db *gorm.DB) surfaceFeedMode {
	s.surfaceFeedModeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surfaceFeedMode) replaceDB(db *gorm.DB) surfaceFeedMode {
	s.surfaceFeedModeDo.ReplaceDB(db)
	return s
}

type surfaceFeedModeDo struct{ gen.DO }

func (s surfaceFeedModeDo) Debug() *surfaceFeedModeDo {
	return s.withDO(s.DO.Debug())
}

func (s surfaceFeedModeDo) WithContext(ctx context.Context) *surfaceFeedModeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surfaceFeedModeDo) ReadDB() *surfaceFeedModeDo {
	return s.Clauses(dbresolver.Read)
}

func (s surfaceFeedModeDo) WriteDB() *surfaceFeedModeDo {
	return s.Clauses(dbresolver.Write)
}

func (s surfaceFeedModeDo) Session(config *gorm.Session) *surfaceFeedModeDo {
	return s.withDO(s.DO.Session(config))
}

func (s surfaceFeedModeDo) Clauses(conds ...clause.Expression) *surfaceFeedModeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surfaceFeedModeDo) Returning(value interface{}, columns ...string) *surfaceFeedModeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surfaceFeedModeDo) Not(conds ...gen.Condition) *surfaceFeedModeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surfaceFeedModeDo) Or(conds ...gen.Condition) *surfaceFeedModeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surfaceFeedModeDo) Select(conds ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surfaceFeedModeDo) Where(conds ...gen.Condition) *surfaceFeedModeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surfaceFeedModeDo) Order(conds ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surfaceFeedModeDo) Distinct(cols ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surfaceFeedModeDo) Omit(cols ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surfaceFeedModeDo) Join(table schema.Tabler, on ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surfaceFeedModeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surfaceFeedModeDo) RightJoin(table schema.Tabler, on ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surfaceFeedModeDo) Group(cols ...field.Expr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surfaceFeedModeDo) Having(conds ...gen.Condition) *surfaceFeedModeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surfaceFeedModeDo) Limit(limit int) *surfaceFeedModeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surfaceFeedModeDo) Offset(offset int) *surfaceFeedModeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surfaceFeedModeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *surfaceFeedModeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surfaceFeedModeDo) Unscoped() *surfaceFeedModeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surfaceFeedModeDo) Create(values ...*model.SurfaceFeedMode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surfaceFeedModeDo) CreateInBatches(values []*model.SurfaceFeedMode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surfaceFeedModeDo) Save(values ...*model.SurfaceFeedMode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surfaceFeedModeDo) First() (*model.SurfaceFeedMode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurfaceFeedMode), nil
	}
}

func (s surfaceFeedModeDo) Take() (*model.SurfaceFeedMode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurfaceFeedMode), nil
	}
}

func (s surfaceFeedModeDo) Last() (*model.SurfaceFeedMode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurfaceFeedMode), nil
	}
}

func (s surfaceFeedModeDo) Find() ([]*model.SurfaceFeedMode, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurfaceFeedMode), err
}

func (s surfaceFeedModeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurfaceFeedMode, err error) {
	buf := make([]*model.SurfaceFeedMode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surfaceFeedModeDo) FindInBatches(result *[]*model.SurfaceFeedMode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surfaceFeedModeDo) Attrs(attrs ...field.AssignExpr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surfaceFeedModeDo) Assign(attrs ...field.AssignExpr) *surfaceFeedModeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surfaceFeedModeDo) Joins(fields ...field.RelationField) *surfaceFeedModeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surfaceFeedModeDo) Preload(fields ...field.RelationField) *surfaceFeedModeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surfaceFeedModeDo) FirstOrInit() (*model.SurfaceFeedMode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurfaceFeedMode), nil
	}
}

func (s surfaceFeedModeDo) FirstOrCreate() (*model.SurfaceFeedMode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurfaceFeedMode), nil
	}
}

func (s surfaceFeedModeDo) FindByPage(offset int, limit int) (result []*model.SurfaceFeedMode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surfaceFeedModeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surfaceFeedModeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surfaceFeedModeDo) Delete(models ...*model.SurfaceFeedMode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surfaceFeedModeDo) withDO(do gen.Dao) *surfaceFeedModeDo {
	s.DO = *do.(*gen.DO)
	return s
}
