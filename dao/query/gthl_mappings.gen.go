// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newGthlMapping(db *gorm.DB, opts ...gen.DOOption) gthlMapping {
	_gthlMapping := gthlMapping{}

	_gthlMapping.gthlMappingDo.UseDB(db, opts...)
	_gthlMapping.gthlMappingDo.UseModel(&model.GthlMapping{})

	tableName := _gthlMapping.gthlMappingDo.TableName()
	_gthlMapping.ALL = field.NewAsterisk(tableName)
	_gthlMapping.Location = field.NewString(tableName, "location")
	_gthlMapping.SurfaceID = field.NewInt32(tableName, "surface_id")

	_gthlMapping.fillFieldMap()

	return _gthlMapping
}

type gthlMapping struct {
	gthlMappingDo gthlMappingDo

	ALL       field.Asterisk
	Location  field.String
	SurfaceID field.Int32

	fieldMap map[string]field.Expr
}

func (g gthlMapping) Table(newTableName string) *gthlMapping {
	g.gthlMappingDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gthlMapping) As(alias string) *gthlMapping {
	g.gthlMappingDo.DO = *(g.gthlMappingDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gthlMapping) updateTableName(table string) *gthlMapping {
	g.ALL = field.NewAsterisk(table)
	g.Location = field.NewString(table, "location")
	g.SurfaceID = field.NewInt32(table, "surface_id")

	g.fillFieldMap()

	return g
}

func (g *gthlMapping) WithContext(ctx context.Context) *gthlMappingDo {
	return g.gthlMappingDo.WithContext(ctx)
}

func (g gthlMapping) TableName() string { return g.gthlMappingDo.TableName() }

func (g gthlMapping) Alias() string { return g.gthlMappingDo.Alias() }

func (g gthlMapping) Columns(cols ...field.Expr) gen.Columns { return g.gthlMappingDo.Columns(cols...) }

func (g *gthlMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gthlMapping) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 2)
	g.fieldMap["location"] = g.Location
	g.fieldMap["surface_id"] = g.SurfaceID
}

func (g gthlMapping) clone(db *gorm.DB) gthlMapping {
	g.gthlMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gthlMapping) replaceDB(db *gorm.DB) gthlMapping {
	g.gthlMappingDo.ReplaceDB(db)
	return g
}

type gthlMappingDo struct{ gen.DO }

func (g gthlMappingDo) Debug() *gthlMappingDo {
	return g.withDO(g.DO.Debug())
}

func (g gthlMappingDo) WithContext(ctx context.Context) *gthlMappingDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gthlMappingDo) ReadDB() *gthlMappingDo {
	return g.Clauses(dbresolver.Read)
}

func (g gthlMappingDo) WriteDB() *gthlMappingDo {
	return g.Clauses(dbresolver.Write)
}

func (g gthlMappingDo) Session(config *gorm.Session) *gthlMappingDo {
	return g.withDO(g.DO.Session(config))
}

func (g gthlMappingDo) Clauses(conds ...clause.Expression) *gthlMappingDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gthlMappingDo) Returning(value interface{}, columns ...string) *gthlMappingDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gthlMappingDo) Not(conds ...gen.Condition) *gthlMappingDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gthlMappingDo) Or(conds ...gen.Condition) *gthlMappingDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gthlMappingDo) Select(conds ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gthlMappingDo) Where(conds ...gen.Condition) *gthlMappingDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gthlMappingDo) Order(conds ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gthlMappingDo) Distinct(cols ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gthlMappingDo) Omit(cols ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gthlMappingDo) Join(table schema.Tabler, on ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gthlMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gthlMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gthlMappingDo) Group(cols ...field.Expr) *gthlMappingDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gthlMappingDo) Having(conds ...gen.Condition) *gthlMappingDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gthlMappingDo) Limit(limit int) *gthlMappingDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gthlMappingDo) Offset(offset int) *gthlMappingDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gthlMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gthlMappingDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gthlMappingDo) Unscoped() *gthlMappingDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gthlMappingDo) Create(values ...*model.GthlMapping) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gthlMappingDo) CreateInBatches(values []*model.GthlMapping, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gthlMappingDo) Save(values ...*model.GthlMapping) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gthlMappingDo) First() (*model.GthlMapping, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GthlMapping), nil
	}
}

func (g gthlMappingDo) Take() (*model.GthlMapping, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GthlMapping), nil
	}
}

func (g gthlMappingDo) Last() (*model.GthlMapping, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GthlMapping), nil
	}
}

func (g gthlMappingDo) Find() ([]*model.GthlMapping, error) {
	result, err := g.DO.Find()
	return result.([]*model.GthlMapping), err
}

func (g gthlMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GthlMapping, err error) {
	buf := make([]*model.GthlMapping, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gthlMappingDo) FindInBatches(result *[]*model.GthlMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gthlMappingDo) Attrs(attrs ...field.AssignExpr) *gthlMappingDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gthlMappingDo) Assign(attrs ...field.AssignExpr) *gthlMappingDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gthlMappingDo) Joins(fields ...field.RelationField) *gthlMappingDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gthlMappingDo) Preload(fields ...field.RelationField) *gthlMappingDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gthlMappingDo) FirstOrInit() (*model.GthlMapping, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GthlMapping), nil
	}
}

func (g gthlMappingDo) FirstOrCreate() (*model.GthlMapping, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GthlMapping), nil
	}
}

func (g gthlMappingDo) FindByPage(offset int, limit int) (result []*model.GthlMapping, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gthlMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gthlMappingDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gthlMappingDo) Delete(models ...*model.GthlMapping) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gthlMappingDo) withDO(do gen.Dao) *gthlMappingDo {
	g.DO = *do.(*gen.DO)
	return g
}
