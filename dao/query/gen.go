// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Event:           newEvent(db, opts...),
		FeedMode:        newFeedMode(db, opts...),
		GthlMapping:     newGthlMapping(db, opts...),
		Location:        newLocation(db, opts...),
		MhlMapping:      newMhlMapping(db, opts...),
		NyhlMapping:     newNyhlMapping(db, opts...),
		OhfTeam:         newOhfTeam(db, opts...),
		Province:        newProvince(db, opts...),
		Rendition:       newRendition(db, opts...),
		SchemaMigration: newSchemaMigration(db, opts...),
		Site:            newSite(db, opts...),
		SitesLocation:   newSitesLocation(db, opts...),
		Surface:         newSurface(db, opts...),
		SurfaceFeedMode: newSurfaceFeedMode(db, opts...),
		TodbSurface:     newTodbSurface(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Event           event
	FeedMode        feedMode
	GthlMapping     gthlMapping
	Location        location
	MhlMapping      mhlMapping
	NyhlMapping     nyhlMapping
	OhfTeam         ohfTeam
	Province        province
	Rendition       rendition
	SchemaMigration schemaMigration
	Site            site
	SitesLocation   sitesLocation
	Surface         surface
	SurfaceFeedMode surfaceFeedMode
	TodbSurface     todbSurface
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Event:           q.Event.clone(db),
		FeedMode:        q.FeedMode.clone(db),
		GthlMapping:     q.GthlMapping.clone(db),
		Location:        q.Location.clone(db),
		MhlMapping:      q.MhlMapping.clone(db),
		NyhlMapping:     q.NyhlMapping.clone(db),
		OhfTeam:         q.OhfTeam.clone(db),
		Province:        q.Province.clone(db),
		Rendition:       q.Rendition.clone(db),
		SchemaMigration: q.SchemaMigration.clone(db),
		Site:            q.Site.clone(db),
		SitesLocation:   q.SitesLocation.clone(db),
		Surface:         q.Surface.clone(db),
		SurfaceFeedMode: q.SurfaceFeedMode.clone(db),
		TodbSurface:     q.TodbSurface.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Event:           q.Event.replaceDB(db),
		FeedMode:        q.FeedMode.replaceDB(db),
		GthlMapping:     q.GthlMapping.replaceDB(db),
		Location:        q.Location.replaceDB(db),
		MhlMapping:      q.MhlMapping.replaceDB(db),
		NyhlMapping:     q.NyhlMapping.replaceDB(db),
		OhfTeam:         q.OhfTeam.replaceDB(db),
		Province:        q.Province.replaceDB(db),
		Rendition:       q.Rendition.replaceDB(db),
		SchemaMigration: q.SchemaMigration.replaceDB(db),
		Site:            q.Site.replaceDB(db),
		SitesLocation:   q.SitesLocation.replaceDB(db),
		Surface:         q.Surface.replaceDB(db),
		SurfaceFeedMode: q.SurfaceFeedMode.replaceDB(db),
		TodbSurface:     q.TodbSurface.replaceDB(db),
	}
}

type queryCtx struct {
	Event           *eventDo
	FeedMode        *feedModeDo
	GthlMapping     *gthlMappingDo
	Location        *locationDo
	MhlMapping      *mhlMappingDo
	NyhlMapping     *nyhlMappingDo
	OhfTeam         *ohfTeamDo
	Province        *provinceDo
	Rendition       *renditionDo
	SchemaMigration *schemaMigrationDo
	Site            *siteDo
	SitesLocation   *sitesLocationDo
	Surface         *surfaceDo
	SurfaceFeedMode *surfaceFeedModeDo
	TodbSurface     *todbSurfaceDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Event:           q.Event.WithContext(ctx),
		FeedMode:        q.FeedMode.WithContext(ctx),
		GthlMapping:     q.GthlMapping.WithContext(ctx),
		Location:        q.Location.WithContext(ctx),
		MhlMapping:      q.MhlMapping.WithContext(ctx),
		NyhlMapping:     q.NyhlMapping.WithContext(ctx),
		OhfTeam:         q.OhfTeam.WithContext(ctx),
		Province:        q.Province.WithContext(ctx),
		Rendition:       q.Rendition.WithContext(ctx),
		SchemaMigration: q.SchemaMigration.WithContext(ctx),
		Site:            q.Site.WithContext(ctx),
		SitesLocation:   q.SitesLocation.WithContext(ctx),
		Surface:         q.Surface.WithContext(ctx),
		SurfaceFeedMode: q.SurfaceFeedMode.WithContext(ctx),
		TodbSurface:     q.TodbSurface.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
