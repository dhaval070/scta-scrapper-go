// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"calendar-scrapper/dao/model"
)

func newRendition(db *gorm.DB, opts ...gen.DOOption) rendition {
	_rendition := rendition{}

	_rendition.renditionDo.UseDB(db, opts...)
	_rendition.renditionDo.UseModel(&model.Rendition{})

	tableName := _rendition.renditionDo.TableName()
	_rendition.ALL = field.NewAsterisk(tableName)
	_rendition.ID = field.NewInt32(tableName, "id")
	_rendition.SurfaceID = field.NewInt32(tableName, "surface_id")
	_rendition.Name = field.NewString(tableName, "name")
	_rendition.Width = field.NewInt32(tableName, "width")
	_rendition.Height = field.NewInt32(tableName, "height")
	_rendition.Ratio = field.NewString(tableName, "ratio")
	_rendition.Bitrate = field.NewInt64(tableName, "bitrate")

	_rendition.fillFieldMap()

	return _rendition
}

type rendition struct {
	renditionDo renditionDo

	ALL       field.Asterisk
	ID        field.Int32
	SurfaceID field.Int32
	Name      field.String
	Width     field.Int32
	Height    field.Int32
	Ratio     field.String
	Bitrate   field.Int64

	fieldMap map[string]field.Expr
}

func (r rendition) Table(newTableName string) *rendition {
	r.renditionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rendition) As(alias string) *rendition {
	r.renditionDo.DO = *(r.renditionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rendition) updateTableName(table string) *rendition {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.SurfaceID = field.NewInt32(table, "surface_id")
	r.Name = field.NewString(table, "name")
	r.Width = field.NewInt32(table, "width")
	r.Height = field.NewInt32(table, "height")
	r.Ratio = field.NewString(table, "ratio")
	r.Bitrate = field.NewInt64(table, "bitrate")

	r.fillFieldMap()

	return r
}

func (r *rendition) WithContext(ctx context.Context) *renditionDo {
	return r.renditionDo.WithContext(ctx)
}

func (r rendition) TableName() string { return r.renditionDo.TableName() }

func (r rendition) Alias() string { return r.renditionDo.Alias() }

func (r rendition) Columns(cols ...field.Expr) gen.Columns { return r.renditionDo.Columns(cols...) }

func (r *rendition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rendition) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["surface_id"] = r.SurfaceID
	r.fieldMap["name"] = r.Name
	r.fieldMap["width"] = r.Width
	r.fieldMap["height"] = r.Height
	r.fieldMap["ratio"] = r.Ratio
	r.fieldMap["bitrate"] = r.Bitrate
}

func (r rendition) clone(db *gorm.DB) rendition {
	r.renditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rendition) replaceDB(db *gorm.DB) rendition {
	r.renditionDo.ReplaceDB(db)
	return r
}

type renditionDo struct{ gen.DO }

func (r renditionDo) Debug() *renditionDo {
	return r.withDO(r.DO.Debug())
}

func (r renditionDo) WithContext(ctx context.Context) *renditionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r renditionDo) ReadDB() *renditionDo {
	return r.Clauses(dbresolver.Read)
}

func (r renditionDo) WriteDB() *renditionDo {
	return r.Clauses(dbresolver.Write)
}

func (r renditionDo) Session(config *gorm.Session) *renditionDo {
	return r.withDO(r.DO.Session(config))
}

func (r renditionDo) Clauses(conds ...clause.Expression) *renditionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r renditionDo) Returning(value interface{}, columns ...string) *renditionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r renditionDo) Not(conds ...gen.Condition) *renditionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r renditionDo) Or(conds ...gen.Condition) *renditionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r renditionDo) Select(conds ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r renditionDo) Where(conds ...gen.Condition) *renditionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r renditionDo) Order(conds ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r renditionDo) Distinct(cols ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r renditionDo) Omit(cols ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r renditionDo) Join(table schema.Tabler, on ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r renditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *renditionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r renditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *renditionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r renditionDo) Group(cols ...field.Expr) *renditionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r renditionDo) Having(conds ...gen.Condition) *renditionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r renditionDo) Limit(limit int) *renditionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r renditionDo) Offset(offset int) *renditionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r renditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *renditionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r renditionDo) Unscoped() *renditionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r renditionDo) Create(values ...*model.Rendition) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r renditionDo) CreateInBatches(values []*model.Rendition, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r renditionDo) Save(values ...*model.Rendition) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r renditionDo) First() (*model.Rendition, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rendition), nil
	}
}

func (r renditionDo) Take() (*model.Rendition, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rendition), nil
	}
}

func (r renditionDo) Last() (*model.Rendition, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rendition), nil
	}
}

func (r renditionDo) Find() ([]*model.Rendition, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rendition), err
}

func (r renditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rendition, err error) {
	buf := make([]*model.Rendition, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r renditionDo) FindInBatches(result *[]*model.Rendition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r renditionDo) Attrs(attrs ...field.AssignExpr) *renditionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r renditionDo) Assign(attrs ...field.AssignExpr) *renditionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r renditionDo) Joins(fields ...field.RelationField) *renditionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r renditionDo) Preload(fields ...field.RelationField) *renditionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r renditionDo) FirstOrInit() (*model.Rendition, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rendition), nil
	}
}

func (r renditionDo) FirstOrCreate() (*model.Rendition, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rendition), nil
	}
}

func (r renditionDo) FindByPage(offset int, limit int) (result []*model.Rendition, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r renditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r renditionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r renditionDo) Delete(models ...*model.Rendition) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *renditionDo) withDO(do gen.Dao) *renditionDo {
	r.DO = *do.(*gen.DO)
	return r
}
